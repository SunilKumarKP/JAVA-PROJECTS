<?xml version="1.0" encoding="UTF-8"?> 
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ext="http://www.ibm.com/xmlns/dde/schema/annotation/ext"> 
    <xsd:complexType name="com.ibm.ws.logging.binaryTrace"> 
        <xsd:annotation> 
            <xsd:documentation>Binary trace options.  The binary trace can be viewed using the logViewer command.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Binary Trace</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation><!--Idiom for "empty element context" (whitespace accepted and ignored)--> 
        <xsd:sequence> 
            <xsd:sequence/> 
        </xsd:sequence> 
        <xsd:attribute name="purgeMaxSize" use="optional" default="50"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the maximum size for the binary trace repository in megabytes.  When the value for purgeMaxSize is specified with a value of more than 0, cleanup based on repository size is enabled, otherwise it is disabled; a value of 0 means no limit.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Maximum repository size</ext:label> 
                    <ext:variable>com.ibm.hpel.trace.purgeMaxSize</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:int"> 
                            <xsd:minInclusive value="0"> 
                            </xsd:minInclusive> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="purgeMinTime" use="optional" default="0" type="hourDuration"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the duration, in hours, after which a server can remove a trace record.  When the value for purgeMinTime is specified with a value of more than 0, cleanup based on trace record age is enabled, otherwise it is disabled; a value of 0 means no limit. Specify a positive integer followed by the unit of time, which can be hours (h). For example, specify 12 hours as 12h.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Minimum retention time</ext:label> 
                    <ext:variable>com.ibm.hpel.trace.purgeMinTime</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="fileSwitchTime" use="optional"> 
            <xsd:annotation> 
                <xsd:documentation>Makes the server close the active trace file and start a new one at the specified hour of the day.  When the value for fileSwitchTime is specified, file switching is enabled, otherwise it is disabled.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Hour of the day to switch file</ext:label> 
                    <ext:variable>com.ibm.hpel.trace.fileSwitchTime</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:int"> 
                            <xsd:minInclusive value="0"> 
                            </xsd:minInclusive> 
                            <xsd:maxInclusive value="23"> 
                            </xsd:maxInclusive> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="bufferingEnabled" use="optional" default="true" type="booleanType"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies whether to allow a small delay in saving records to the disk for improved performance.  When bufferingEnabled is set to true, records will be briefly held in memory before being written to disk.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Enable output buffering</ext:label> 
                    <ext:variable>com.ibm.hpel.trace.bufferingEnabled</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="outOfSpaceAction" use="optional" default="StopLogging"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the action to perform when the file system where records are kept runs out of free space.  When outOfSpaceAction is set to "StopLogging" the server will stop tracing when records are not able to be written to disk.  When this attribute is set to "PurgeOld" the server will attempt to delete the oldest records from the binary trace repository to make space for new records.  When this attribute is set to "StopServer" binary trace will stop the server when records cannot be written.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Action if data can't be stored</ext:label> 
                    <ext:variable>com.ibm.hpel.trace.outOfSpaceAction</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="StopServer"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Stop Server</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="PurgeOld"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Remove old records</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="StopLogging"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Stop Logging</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:complexType name="com.ibm.ws.logging.binaryLog"> 
        <xsd:annotation> 
            <xsd:documentation>Binary logging options.  The binary log can be viewed using the logViewer command.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Binary Log</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation><!--Idiom for "empty element context" (whitespace accepted and ignored)--> 
        <xsd:sequence> 
            <xsd:sequence/> 
        </xsd:sequence> 
        <xsd:attribute name="purgeMaxSize" use="optional" default="50"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the maximum size for the binary log repository in megabytes.  When the value for purgeMaxSize is specified with a value of more than 0, cleanup based on repository size is enabled, otherwise it is disabled; a value of 0 means no limit.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Maximum repository size</ext:label> 
                    <ext:variable>com.ibm.hpel.log.purgeMaxSize</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:int"> 
                            <xsd:minInclusive value="0"> 
                            </xsd:minInclusive> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="purgeMinTime" use="optional" default="0" type="hourDuration"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the duration, in hours, after which a server can remove a log record.  When the value for purgeMinTime is specified with a value of more than 0, cleanup based on log record age is enabled, otherwise it is disabled; a value of 0 means no limit. Specify a positive integer followed by the unit of time, which can be hours (h). For example, specify 12 hours as 12h.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Minimum retention time</ext:label> 
                    <ext:variable>com.ibm.hpel.log.purgeMinTime</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="fileSwitchTime" use="optional"> 
            <xsd:annotation> 
                <xsd:documentation>Makes the server close the active log file and start a new one at the specified hour of the day.  When the value for fileSwitchTime is specified, file switching is enabled, otherwise it is disabled.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Hour of the day to switch file</ext:label> 
                    <ext:variable>com.ibm.hpel.log.fileSwitchTime</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:int"> 
                            <xsd:minInclusive value="0"> 
                            </xsd:minInclusive> 
                            <xsd:maxInclusive value="23"> 
                            </xsd:maxInclusive> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="bufferingEnabled" use="optional" default="true" type="booleanType"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies whether to allow a small delay in saving records to the disk for improved performance.  When bufferingEnabled is set to true, records will be briefly held in memory before being written to disk.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Enable output buffering</ext:label> 
                    <ext:variable>com.ibm.hpel.log.bufferingEnabled</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="outOfSpaceAction" use="optional" default="StopLogging"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the action to perform when the file system where records are kept runs out of free space.  When outOfSpaceAction is set to "StopLogging" the server will stop logging when records are not able to be written to disk.  When this attribute is set to "PurgeOld" the server will attempt to delete the oldest records from the binary log repository to make space for new records.  When this attribute is set to "StopServer" the binary log will stop the server when records cannot be written.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Action if data can't be stored</ext:label> 
                    <ext:variable>com.ibm.hpel.log.outOfSpaceAction</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="StopServer"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Stop Server</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="PurgeOld"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Remove old records</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="StopLogging"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Stop Logging</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:complexType name="com.ibm.ws.kernel.feature"> 
        <xsd:annotation> 
            <xsd:documentation>Defines how the server loads features.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Feature Manager</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation> 
        <xsd:sequence> 
            <xsd:element name="feature" minOccurs="0" maxOccurs="unbounded" type="xsd:string"> 
                <xsd:annotation> 
                    <xsd:documentation>Specifies a feature to be used when the server runs.</xsd:documentation> 
                    <xsd:appinfo> 
                        <ext:label>Feature</ext:label> 
                    </xsd:appinfo> 
                </xsd:annotation> 
            </xsd:element> 
        </xsd:sequence> 
        <xsd:attribute name="onError" use="optional" default="WARN"> 
            <xsd:annotation> 
                <xsd:documentation>Action to take after a failure to load a feature. </xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>On error</ext:label> 
                    <ext:variable>onError</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="WARN"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will issue warning and error messages when it incurs a configuration error. </xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="FAIL"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will issue a warning or error message on the first error occurrence and then stop the server.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="IGNORE"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will not issue any warning and error messages when it incurs a configuration error.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:complexType name="com.ibm.ws.threading"> 
        <xsd:annotation> 
            <xsd:documentation>Defines settings for the Liberty kernel default executor.  Note that there is always one and exactly one default executor, for use by the Liberty runtime only and not directly accessible by applications.  Applications that need to configure and utilize executors should instead use Managed Executors.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Executor Management</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation><!--Idiom for "empty element context" (whitespace accepted and ignored)--> 
        <xsd:sequence> 
            <xsd:sequence/> 
        </xsd:sequence> 
        <xsd:attribute name="name" use="optional" default="Default Executor" type="xsd:string"> 
            <xsd:annotation> 
                <xsd:documentation>The name of the Liberty kernel default executor.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Name</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="maxThreads" use="optional" default="-1" type="intType"> 
            <xsd:annotation> 
                <xsd:documentation>Maximum number of threads that can be associated with the executor. If greater than 0, this value must be greater than or equal to the value of coreThreads. If the value of maxThreads is less than or equal to 0, the maximum number of threads is unbounded.  Note that the actual number of threads associated with the executor is determined dynamically by the Liberty kernel, so leaving the maximum threads unbounded does not imply that the runtime will actively create large amounts of threads; it simply lets the Liberty kernel decide how many threads to associate with the executor without having a defined upper boundary.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Maximum threads</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="coreThreads" use="optional" default="-1" type="intType"> 
            <xsd:annotation> 
                <xsd:documentation>Steady-state or core number of threads to associate with the executor. The number of threads associated with the executor will quickly grow to this number. If this value is less than 0, a default value is used. This default value is calculated based on the number of hardware threads on the system.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Core threads</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="keepAlive" use="optional" default="60s" type="duration"> 
            <xsd:annotation> 
                <xsd:documentation>Amount of time to keep an idle thread in the pool before allowing it to terminate. Specify a positive integer followed by a unit of time, which can be hours (h), minutes (m), seconds (s), or milliseconds (ms). For example, specify 500 milliseconds as 500ms. You can include multiple values in a single entry. For example, 1s500ms is equivalent to 1.5 seconds.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Keep alive time</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="stealPolicy" use="optional" default="LOCAL"> 
            <xsd:annotation> 
                <xsd:documentation>The work-stealing policy to employ. The options for this policy determine how work is queued, and how threads obtain queued work.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Work stealing policy</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="STRICT"> 
                                <xsd:annotation> 
                                    <xsd:documentation>All threads that generate work own a local work pile. Threads that are associated with the executor take work from other threads when the local work pile is exhausted.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="LOCAL"> 
                                <xsd:annotation> 
                                    <xsd:documentation>A global work queue is used for work that is generated by threads that are not associated with the executor. Work generated by threads associated with the executor is placed on a local work pile. This work pile is owned by the generating thread, unless another thread steals it. Threads that are associated with the executor take work associated with other threads if the local work pile is empty and there is no work on the global work queue.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="NEVER"> 
                                <xsd:annotation> 
                                    <xsd:documentation>A global work queue is used to feed work to threads that are associated with the executor. No stealing will occur.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="rejectedWorkPolicy" use="optional" default="ABORT"> 
            <xsd:annotation> 
                <xsd:documentation>Policy to employ when the executor is unable to stage work for execution.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Rejected execution policy</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="ABORT"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Raise an exception.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="CALLER_RUNS"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Execute the work immediately on the caller's thread.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:complexType name="com.ibm.ws.config"> 
        <xsd:annotation> 
            <xsd:documentation>Defines how the server processes configuration information.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Configuration Management</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation><!--Idiom for "empty element context" (whitespace accepted and ignored)--> 
        <xsd:sequence> 
            <xsd:sequence/> 
        </xsd:sequence> 
        <xsd:attribute name="onError" use="optional" default="WARN"> 
            <xsd:annotation> 
                <xsd:documentation>Action to take after a incurring a configuration error. </xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>On error</ext:label> 
                    <ext:variable>onError</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="WARN"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will issue warning and error messages when it incurs a configuration error. </xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="FAIL"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will issue a warning or error message on the first error occurrence and then stop the server.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="IGNORE"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will not issue any warning and error messages when it incurs a configuration error.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="monitorInterval" use="optional" default="500ms" type="duration"> 
            <xsd:annotation> 
                <xsd:documentation>Rate at which the server checks for configuration updates. Specify a positive integer followed by a unit of time, which can be hours (h), minutes (m), seconds (s), or milliseconds (ms). For example, specify 500 milliseconds as 500ms. You can include multiple values in a single entry. For example, 1s500ms is equivalent to 1.5 seconds.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Update polling rate</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="updateTrigger" use="optional" default="polled"> 
            <xsd:annotation> 
                <xsd:documentation>Configuration update method or trigger.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Update trigger</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="polled"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will scan for changes at the polling interval on all the configuration files and update the runtime configuration with the changes detected.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="mbean"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Server will only update the configuration when prompted by the FileNotificationMbean. The FileNotificationMbean is typically called by an external program such as an integrated development environment or a management application.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="disabled"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Disables all update monitoring. Configuration changes will not be applied while the server is running.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:complexType name="com.ibm.ws.kernel.metatype.helper.fileset"> 
        <xsd:annotation> 
            <xsd:documentation>Specifies a set of files starting from a base directory and matching a set of patterns.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Fileset</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation><!--Idiom for "empty element context" (whitespace accepted and ignored)--> 
        <xsd:sequence> 
            <xsd:sequence/> 
        </xsd:sequence> 
        <xsd:attribute name="dir" use="optional" default="${server.config.dir}" type="dirLocation"> 
            <xsd:annotation> 
                <xsd:documentation>The base directory to search for files.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Base directory</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="caseSensitive" use="optional" default="true" type="booleanType"> 
            <xsd:annotation> 
                <xsd:documentation>Boolean to indicate whether or not the search should be case sensitive (default: true).</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Case sensitive</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="includes" use="optional" default="*" type="xsd:string"> 
            <xsd:annotation> 
                <xsd:documentation>The comma or space separated list of file name patterns to include in the search results (default: *).</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Includes pattern</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="excludes" use="optional" default="" type="xsd:string"> 
            <xsd:annotation> 
                <xsd:documentation>The comma or space separated list of file name patterns to exclude from the search results, by default no files are excluded.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Excludes pattern</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="scanInterval" use="optional" default="0" type="duration"> 
            <xsd:annotation> 
                <xsd:documentation>Scanning interval to check the fileset for changes as a long with a time unit suffix h-hour, m-minute, s-second, ms-millisecond (e.g. 2ms or 5s). Disabled (scanInterval=0) by default. Specify a positive integer followed by a unit of time, which can be hours (h), minutes (m), seconds (s), or milliseconds (ms). For example, specify 500 milliseconds as 500ms. You can include multiple values in a single entry. For example, 1s500ms is equivalent to 1.5 seconds.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Scan interval</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:complexType name="com.ibm.ws.kernel.metatype.helper.fileset-factory"> 
        <xsd:complexContent> 
            <xsd:extension base="com.ibm.ws.kernel.metatype.helper.fileset"> 
                <xsd:attribute name="id" type="factoryIdType" use="optional"> 
                    <xsd:annotation> 
                        <xsd:documentation>A unique configuration ID.</xsd:documentation> 
                        <xsd:appinfo> 
                            <ext:label>ID</ext:label> 
                        </xsd:appinfo> 
                    </xsd:annotation> 
                </xsd:attribute> 
            </xsd:extension> 
        </xsd:complexContent> 
    </xsd:complexType> 
    <xsd:complexType name="com.ibm.ws.logging"> 
        <xsd:annotation> 
            <xsd:documentation>Controls the capture and output of log and trace messages.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Logging</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation><!--Idiom for "empty element context" (whitespace accepted and ignored)--> 
        <xsd:sequence> 
            <xsd:sequence/> 
        </xsd:sequence> 
        <xsd:attribute name="maxFileSize" use="optional" default="20"> 
            <xsd:annotation> 
                <xsd:documentation>Maximum size of a log file, in megabytes, before being rolled over; a value of 0 means no limit.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Maximum log file size</ext:label> 
                    <ext:variable>com.ibm.ws.logging.max.file.size</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:int"> 
                            <xsd:minInclusive value="0"> 
                            </xsd:minInclusive> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="maxFiles" use="optional" default="2"> 
            <xsd:annotation> 
                <xsd:documentation>Maximum number of log files that will be kept, before the oldest file is removed; a value of 0 means no limit.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Maximum log files</ext:label> 
                    <ext:variable>com.ibm.ws.logging.max.files</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:int"> 
                            <xsd:minInclusive value="0"> 
                            </xsd:minInclusive> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="logDirectory" use="optional" default="${server.output.dir}/logs" type="dirLocation"> 
            <xsd:annotation> 
                <xsd:documentation>Location of the directory for log files. The default value is ${server.output.dir}/logs.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Log directory</ext:label> 
                    <ext:variable>com.ibm.ws.logging.log.directory</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="messageFileName" use="optional" default="messages.log" type="xsd:string"> 
            <xsd:annotation> 
                <xsd:documentation>Name of the file to which message output will be written relative to the configured log directory. The default value is messages.log.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Message file name</ext:label> 
                    <ext:variable>com.ibm.ws.logging.message.file.name</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="traceFileName" use="optional" default="trace.log" type="xsd:string"> 
            <xsd:annotation> 
                <xsd:documentation>Name of the file to which trace output will be written relative to the configured log directory. The default value is trace.log.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Trace file name</ext:label> 
                    <ext:variable>com.ibm.ws.logging.trace.file.name</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="traceSpecification" use="optional" default="*=info" type="xsd:string"> 
            <xsd:annotation> 
                <xsd:documentation>A trace specification that conforms to the trace specification grammar and specifies the initial state for various trace components. An empty value is allowed and treated as 'disable all trace'. Any component that is not specified is initialized to a default state of *=info.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Trace specification</ext:label> 
                    <ext:variable>com.ibm.ws.logging.trace.specification</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="hideMessage" use="optional" type="xsd:string"> 
            <xsd:annotation> 
                <xsd:documentation>The list of messages, separated by a comma, that are configured to be hidden from the console.log and message.log files. If the messages are configured to be hidden, then they are redirected to the trace.log file.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Messages to be hidden</ext:label> 
                    <ext:variable>com.ibm.ws.logging.hideMessage</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="traceFormat" use="optional" default="ENHANCED"> 
            <xsd:annotation> 
                <xsd:documentation>This format is used for the trace log.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Trace format</ext:label> 
                    <ext:variable>com.ibm.ws.logging.trace.format</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="BASIC"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Use the basic trace format.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="ENHANCED"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Use the enhanced basic trace format.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="ADVANCED"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Use the advanced trace format.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="isoDateFormat" use="optional" default="false" type="booleanType"> 
            <xsd:annotation> 
                <xsd:documentation>If this attribute is set to true, log entries in the messages.log, trace.log, and FFDC log files will use the ISO 8601 date and time format. The default value is false.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Use the ISO 8601 date format</ext:label> 
                    <ext:variable>com.ibm.ws.logging.isoDateFormat</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="consoleLogLevel" use="optional" default="AUDIT"> 
            <xsd:annotation> 
                <xsd:documentation>The logging level used to filter messages written to system streams. The default value is audit.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Console log level</ext:label> 
                    <ext:variable>com.ibm.ws.logging.console.log.level</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="INFO"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Info, audit, and warning messages will be written to the system output stream. Error messages will be written to the system error stream.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="AUDIT"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Audit and warning messages will be written to the system output stream. Error messages will be written to the system error stream.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="WARNING"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Warning messages will be written to the system output stream. Error messages will be written to the system error stream.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="ERROR"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Error messages will be written to the system error stream.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="OFF"> 
                                <xsd:annotation> 
                                    <xsd:documentation>No server output will be written to system streams.  Only JVM output will be written to system streams.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
        <xsd:attribute name="copySystemStreams" use="optional" default="true" type="booleanType"> 
            <xsd:annotation> 
                <xsd:documentation>If true, write System.out to the system output stream and System.err to the system error stream. If false, System.out and System.err will write to configured logs like messages.log or trace.log, but not to the system streams. The default value is true.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Copy System.out and System.err to system streams</ext:label> 
                    <ext:variable>com.ibm.ws.logging.copy.system.streams</ext:variable> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="suppressSensitiveTrace" use="optional" default="false" type="booleanType"> 
            <xsd:annotation> 
                <xsd:documentation>The server trace can expose sensitive data when tracing untyped data, such as bytes received over a network connection. If true, prevent potentially sensitive information from being exposed in log and trace files. The default value is false.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Suppress sensitive trace</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:simpleType name="variableType"> 
        <xsd:restriction base="xsd:string"> 
            <xsd:pattern value=".*$\{[^\s\}]*\}.*"/> 
        </xsd:restriction> 
    </xsd:simpleType> 
    <xsd:simpleType name="location"> 
        <xsd:union memberTypes="xsd:string variableType"/> 
    </xsd:simpleType> 
    <xsd:simpleType name="hourDuration"> 
        <xsd:union memberTypes="xsd:string variableType"/> 
    </xsd:simpleType> 
    <xsd:simpleType name="booleanType"> 
        <xsd:union memberTypes="xsd:boolean variableType"/> 
    </xsd:simpleType> 
    <xsd:simpleType name="intType"> 
        <xsd:union memberTypes="xsd:int variableType"/> 
    </xsd:simpleType> 
    <xsd:simpleType name="duration"> 
        <xsd:union memberTypes="xsd:string variableType"/> 
    </xsd:simpleType> 
    <xsd:simpleType name="dirLocation"> 
        <xsd:union memberTypes="xsd:string variableType"/> 
    </xsd:simpleType> 
    <xsd:simpleType name="factoryIdType"> 
        <xsd:restriction base="xsd:string"/> 
    </xsd:simpleType> 
    <xsd:simpleType name="schemaPropertiesType"> 
        <xsd:restriction base="xsd:string"/> 
    </xsd:simpleType> 
    <xsd:complexType name="includeType"> 
        <xsd:annotation> 
            <xsd:documentation>Specify a configuration resource to include in the server's configuration.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Include</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation> 
        <xsd:attribute name="optional" type="xsd:boolean" use="optional" default="false"> 
            <xsd:annotation> 
                <xsd:documentation>Allow the included resource to be skipped if it cannot be found.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Resource is optional</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="location" type="location" use="required"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the resource location. This can be a file path or a URI for a remote resource.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Location</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="onConflict" use="optional" default="MERGE"> 
            <xsd:annotation> 
                <xsd:documentation>Specifies the behavior that is used to merge elements when conflicts are found.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>On conflict</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
            <xsd:simpleType> 
                <xsd:union memberTypes="variableType"> 
                    <xsd:simpleType> 
                        <xsd:restriction base="xsd:string"> 
                            <xsd:enumeration value="MERGE"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Conflicting elements will be merged together.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="REPLACE"> 
                                <xsd:annotation> 
                                    <xsd:documentation>When elements conflict, the element from the included file will replace the conflicting element.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                            <xsd:enumeration value="IGNORE"> 
                                <xsd:annotation> 
                                    <xsd:documentation>Conflicting elements in the included file will be ignored.</xsd:documentation> 
                                </xsd:annotation> 
                            </xsd:enumeration> 
                        </xsd:restriction> 
                    </xsd:simpleType> 
                </xsd:union> 
            </xsd:simpleType> 
        </xsd:attribute> 
    </xsd:complexType> 
    <xsd:complexType name="variableDefinitionType"> 
        <xsd:annotation> 
            <xsd:documentation>Declare a new variable by specifying the name and value for the variable.</xsd:documentation> 
            <xsd:appinfo> 
                <ext:label>Variable Declaration</ext:label> 
            </xsd:appinfo> 
        </xsd:annotation> 
        <xsd:attribute name="name" type="xsd:string" use="required"> 
            <xsd:annotation> 
                <xsd:documentation>The name of the variable.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Name</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
        <xsd:attribute name="value" type="xsd:string" use="required"> 
            <xsd:annotation> 
                <xsd:documentation>The value to be assigned to the variable.</xsd:documentation> 
                <xsd:appinfo> 
                    <ext:label>Value</ext:label> 
                </xsd:appinfo> 
            </xsd:annotation> 
        </xsd:attribute> 
    </xsd:complexType> 
    <xsd:complexType name="serverType"> 
        <xsd:choice minOccurs="0" maxOccurs="unbounded"> 
            <xsd:element name="include" type="includeType"/> 
            <xsd:element name="variable" type="variableDefinitionType"/> 
            <xsd:element name="featureManager" type="com.ibm.ws.kernel.feature"/> 
            <xsd:element name="executor" type="com.ibm.ws.threading"/> 
            <xsd:element name="config" type="com.ibm.ws.config"/> 
            <xsd:element name="fileset" type="com.ibm.ws.kernel.metatype.helper.fileset-factory"/> 
            <xsd:element name="logging" type="com.ibm.ws.logging"/> 
        </xsd:choice> 
        <xsd:attribute name="description" type="xsd:string" use="optional"/> 
        <xsd:anyAttribute processContents="skip"> 
        </xsd:anyAttribute> 
    </xsd:complexType> 
    <xsd:element name="client" type="serverType"/> 
    <xsd:element name="server" type="serverType"/> 
</xsd:schema> 
